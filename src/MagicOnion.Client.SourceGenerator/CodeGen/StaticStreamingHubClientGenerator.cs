using System.Text;
using MagicOnion.Client.SourceGenerator.CodeAnalysis;

namespace MagicOnion.Client.SourceGenerator.CodeGen;

public class StaticStreamingHubClientGenerator
{
    class StreamingHubClientBuildContext
    {
        public StreamingHubClientBuildContext(MagicOnionStreamingHubInfo hub, StringBuilder writer, bool enableStreamingHubDiagnosticHandler)
        {
            Hub = hub;
            Writer = writer;
            EnableStreamingHubDiagnosticHandler = enableStreamingHubDiagnosticHandler;
        }

        public MagicOnionStreamingHubInfo Hub { get; }

        public StringBuilder Writer { get; }

        public bool EnableStreamingHubDiagnosticHandler { get; }
    }

    public static string Build(GenerationContext generationContext, MagicOnionStreamingHubInfo hubInfo)
    {
        using var pooledStringBuilder = generationContext.GetPooledStringBuilder();
        var writer = pooledStringBuilder.Instance;

        EmitHeader(generationContext, writer);

        var buildContext = new StreamingHubClientBuildContext(hubInfo, writer, generationContext.Options.EnableStreamingHubDiagnosticHandler);

        EmitPreamble(generationContext, buildContext);
        EmitHubClientClass(generationContext, buildContext);
        EmitPostscript(generationContext, buildContext);

        return writer.ToString();
    }

    static void EmitHeader(GenerationContext generationContext, StringBuilder writer)
    {
        writer.AppendLine("""
            // <auto-generated />
            #pragma warning disable CS0618 // 'member' is obsolete: 'text'
            #pragma warning disable CS0612 // 'member' is obsolete
            #pragma warning disable CS0414 // The private field 'field' is assigned but its value is never used
            #pragma warning disable CS8019 // Unnecessary using directive.
            #pragma warning disable CS1522 // Empty switch block

            """);
    }

    static void EmitPreamble(GenerationContext generationContext, StreamingHubClientBuildContext ctx)
    {
        if (!string.IsNullOrWhiteSpace(generationContext.Namespace))
        {
            ctx.Writer.AppendLineWithFormat($$"""
            namespace {{generationContext.Namespace}}
            {
            """);
        }
        ctx.Writer.AppendLineWithFormat($$"""
                partial class {{generationContext.InitializerPartialTypeName}}
                {
                    static partial class MagicOnionGeneratedClient
                    {
            """);
    }

    static void EmitPostscript(GenerationContext generationContext, StreamingHubClientBuildContext ctx)
    {
        ctx.Writer.AppendLine("""
                    }
                }
            """);

        if (!string.IsNullOrWhiteSpace(generationContext.Namespace))
        {
            ctx.Writer.AppendLine("""
            }
            """);
        }
    }

    static void EmitProperties(StreamingHubClientBuildContext ctx)
    {
        if (ctx.EnableStreamingHubDiagnosticHandler)
        {
            ctx.Writer.AppendLineWithFormat($"""
                            readonly global::MagicOnion.Client.IStreamingHubDiagnosticHandler diagnosticHandler;
            """);
            ctx.Writer.AppendLine();
        }
    }

    static void EmitHubClientClass(GenerationContext generationContext, StreamingHubClientBuildContext ctx)
    {
        ctx.Writer.AppendLineWithFormat($$"""
                        [global::MagicOnion.Ignore]
                        public class {{ctx.Hub.GetClientFullName()}} : global::MagicOnion.Client.StreamingHubClientBase<{{ctx.Hub.ServiceType.FullName}}, {{ctx.Hub.Receiver.ReceiverType.FullName}}>, {{ctx.Hub.ServiceType.FullName}}
                        {
            """);
        EmitProperties(ctx);
        EmitConstructor(ctx);
        EmitHelperMethods(ctx);
        EmitHubMethods(ctx, isFireAndForget: false);
        EmitFireAndForget(ctx);
        EmitOnBroadcastEvent(ctx);
        EmitOnResponseEvent(ctx);
        ctx.Writer.AppendLine("""
                        }
            """);
        // }
    }

    static void EmitHelperMethods(StreamingHubClientBuildContext ctx)
    {
        if (ctx.EnableStreamingHubDiagnosticHandler)
        {
            ctx.Writer.AppendLineWithFormat($$"""
                            global::System.Threading.Tasks.Task<TResponse> WriteMessageWithResponseDiagnosticAsync<TRequest, TResponse>(int methodId, TRequest message, [global::System.Runtime.CompilerServices.CallerMemberName] string callerMemberName = default!)
                            {
                                if (diagnosticHandler is null)
                                {
                                    return base.WriteMessageWithResponseAsync<TRequest, TResponse>(methodId, message);
                                }

                                return diagnosticHandler.OnMethodInvoke(this, methodId, callerMemberName, message, isFireAndForget: true, base.WriteMessageWithResponseAsync<TRequest, TResponse>);
                            }

                            global::System.Threading.Tasks.Task<TResponse> WriteMessageFireAndForgetDiagnosticAsync<TRequest, TResponse>(int methodId, TRequest message, [global::System.Runtime.CompilerServices.CallerMemberName] string callerMemberName = default!)
                            {
                                if (diagnosticHandler is null)
                                {
                                    return base.WriteMessageFireAndForgetAsync<TRequest, TResponse>(methodId, message);
                                }

                                return diagnosticHandler.OnMethodInvoke(this, methodId, callerMemberName, message, isFireAndForget: true, base.WriteMessageFireAndForgetAsync<TRequest, TResponse>);
                            }
            """);
            ctx.Writer.AppendLine();
        }
    }

    static void EmitConstructor(StreamingHubClientBuildContext ctx)
    {
        if (ctx.EnableStreamingHubDiagnosticHandler)
        {
            ctx.Writer.AppendLineWithFormat($$"""
                            public {{ctx.Hub.GetClientFullName()}}(global::Grpc.Core.CallInvoker callInvoker, global::System.String host, global::Grpc.Core.CallOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider, global::MagicOnion.Client.IMagicOnionClientLogger logger, global::MagicOnion.Client.IStreamingHubDiagnosticHandler diagnosticHandler)
                                : base("{{ctx.Hub.ServiceType.Name}}", callInvoker, host, options, serializerProvider, logger)
                            {
                                this.diagnosticHandler = diagnosticHandler;
                            }
            """);
        }
        else
        {
            ctx.Writer.AppendLineWithFormat($$"""
                            public {{ctx.Hub.GetClientFullName()}}(global::Grpc.Core.CallInvoker callInvoker, global::System.String host, global::Grpc.Core.CallOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider, global::MagicOnion.Client.IMagicOnionClientLogger logger)
                                : base("{{ctx.Hub.ServiceType.Name}}", callInvoker, host, options, serializerProvider, logger)
                            {
                            }
            """);
        }
        ctx.Writer.AppendLine();
    }

    static void EmitFireAndForget(StreamingHubClientBuildContext ctx)
    {
        ctx.Writer.AppendLineWithFormat($$"""
                            public {{ctx.Hub.ServiceType.FullName}} FireAndForget()
                                => new FireAndForgetClient(this);
                                
                            [global::MagicOnion.Ignore]
                            class FireAndForgetClient : {{ctx.Hub.ServiceType.FullName}}
                            {
                                readonly {{ctx.Hub.GetClientFullName()}} parent;

                                public FireAndForgetClient({{ctx.Hub.GetClientFullName()}} parent)
                                    => this.parent = parent;

                                public {{ctx.Hub.ServiceType.FullName}} FireAndForget() => this;
                                public global::System.Threading.Tasks.Task DisposeAsync() => throw new global::System.NotSupportedException();
                                public global::System.Threading.Tasks.Task WaitForDisconnect() => throw new global::System.NotSupportedException();

            """);
        EmitHubMethods(ctx, isFireAndForget: true);
        ctx.Writer.AppendLine("""
                            }

            """);
    }

    static void EmitHubMethods(StreamingHubClientBuildContext ctx, bool isFireAndForget)
    {
        // public Task MethodReturnWithoutValue()
        //     => WriteMessageWithResponseAsync<MessagePack.Nil, MessagePack.Nil>(FNV1A32.GetHashCode(nameof(MethodReturnWithoutValue)), MessagePack.Nil.Default);
        // public Task<int> MethodParameterless()
        //     => WriteMessageWithResponseAsync<MessagePack.Nil, int>(FNV1A32.GetHashCode(nameof(MethodParameterless)), MessagePack.Nil.Default);
        // public Task<int> MethodParameter_One(int arg0)
        //     => WriteMessageWithResponseAsync<int, int>(FNV1A32.GetHashCode(nameof(MethodParameter_One)), arg0);
        // public Task<int> MethodParameter_Many(int arg0, string arg1)
        //     => WriteMessageWithResponseAsync<DynamicArgumentTuple<int, string>, int>(FNV1A32.GetHashCode(nameof(MethodParameter_Many)), new DynamicArgumentTuple<int, string>(arg0, arg1));
        foreach (var method in ctx.Hub.Methods)
        {
            var writeMessageParameters = method.Parameters.Count switch
            {
                // Nil.Default
                0 => $", global::MessagePack.Nil.Default",
                // arg0
                1 => $", {method.Parameters[0].Name}",
                // new DynamicArgumentTuple(arg1, arg2, ...)
                _ => $", {method.Parameters.ToNewDynamicArgumentTuple()}",
            };
            var writeMessageAsync = ctx.EnableStreamingHubDiagnosticHandler
                ? isFireAndForget
                    ? "parent.WriteMessageFireAndForgetDiagnosticAsync"
                    : "this.WriteMessageWithResponseDiagnosticAsync"
                : isFireAndForget
                    ? "parent.WriteMessageFireAndForgetAsync"
                    : "base.WriteMessageWithResponseAsync";

            if (isFireAndForget) ctx.Writer.Append("    ");
            ctx.Writer.AppendLineWithFormat($"""
                            public {method.MethodReturnType.FullName} {method.MethodName}({method.Parameters.ToMethodSignaturize()})
            """);

            if (isFireAndForget) ctx.Writer.Append("    ");
            if (method.MethodReturnType == MagicOnionTypeInfo.KnownTypes.System_Threading_Tasks_ValueTask)
            {
                // ValueTask
                ctx.Writer.AppendLineWithFormat($"""
                                => new global::System.Threading.Tasks.ValueTask({writeMessageAsync}<{method.RequestType.FullName}, {method.ResponseType.FullName}>({method.HubId}{writeMessageParameters}));
            """);
            }
            else if (method.MethodReturnType.HasGenericArguments && method.MethodReturnType.GetGenericTypeDefinition() == MagicOnionTypeInfo.KnownTypes.System_Threading_Tasks_ValueTask)
            {
                // ValueTask<T>
                ctx.Writer.AppendLineWithFormat($"""
                                => new global::System.Threading.Tasks.ValueTask<{method.ResponseType.FullName}>({writeMessageAsync}<{method.RequestType.FullName}, {method.ResponseType.FullName}>({method.HubId}{writeMessageParameters}));
            """);
            }
            else
            {
                // Task, Task<T>
                ctx.Writer.AppendLineWithFormat($"""
                                => {writeMessageAsync}<{method.RequestType.FullName}, {method.ResponseType.FullName}>({method.HubId}{writeMessageParameters});
            """);
            }
        }

        ctx.Writer.AppendLine();
    }

    static void EmitOnBroadcastEvent(StreamingHubClientBuildContext ctx)
    {
        ctx.Writer.AppendLine("""
                            protected override void OnBroadcastEvent(global::System.Int32 methodId, global::System.ArraySegment<global::System.Byte> data)
                            {
                                switch (methodId)
                                {
            """);
        foreach (var method in ctx.Hub.Receiver.Methods)
        {
            var methodArgs = method.Parameters.Count switch
            {
                0 => "",
                1 => "value",
                _ => string.Join(", ", Enumerable.Range(1, method.Parameters.Count).Select(x => $"value.Item{x}"))
            };

            if (ctx.EnableStreamingHubDiagnosticHandler)
            {
                ctx.Writer.AppendLineWithFormat($$"""
                                    case {{method.HubId}}: // {{method.MethodReturnType.ToDisplayName()}} {{method.MethodName}}({{method.Parameters.ToMethodSignaturize()}})
                                        {
                                            var value = base.Deserialize<{{method.RequestType.FullName}}>(data);
                                            diagnosticHandler?.OnBroadcastEvent(this, "{{method.MethodName}}", value);
                                            receiver.{{method.MethodName}}({{methodArgs}});
                                        }
                                        break;
            """);
            }
            else
            {
                ctx.Writer.AppendLineWithFormat($$"""
                                    case {{method.HubId}}: // {{method.MethodReturnType.ToDisplayName()}} {{method.MethodName}}({{method.Parameters.ToMethodSignaturize()}})
                                        {
                                            var value = base.Deserialize<{{method.RequestType.FullName}}>(data);
                                            receiver.{{method.MethodName}}({{methodArgs}});
                                        }
                                        break;
            """);
            }
        }
        ctx.Writer.AppendLine("""
                                }
                            }

            """);
    }

    static void EmitOnResponseEvent(StreamingHubClientBuildContext ctx)
    {
        ctx.Writer.AppendLine("""
                            protected override void OnResponseEvent(global::System.Int32 methodId, global::System.Object taskCompletionSource, global::System.ArraySegment<global::System.Byte> data)
                            {
                                switch (methodId)
                                {
            """);
        foreach (var method in ctx.Hub.Methods)
        {
            ctx.Writer.AppendLineWithFormat($$"""
                                    case {{method.HubId}}: // {{method.MethodReturnType.ToDisplayName()}} {{method.MethodName}}({{method.Parameters.ToMethodSignaturize()}})
                                        base.SetResultForResponse<{{method.ResponseType.FullName}}>(taskCompletionSource, data);
                                        break;
            """);
        }
        ctx.Writer.AppendLine("""
                                }
                            }

            """);
    }
}
